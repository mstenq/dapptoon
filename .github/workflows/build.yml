name: Cross-Platform Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: dapptoon-linux-amd64
            build_args: ""
          - os: windows-latest
            artifact_name: dapptoon-windows-amd64.exe
            build_args: ""
          - os: macos-latest
            artifact_name: dapptoon-darwin-amd64
            build_args: ""
          - os: macos-latest
            artifact_name: dapptoon-darwin-arm64
            build_args: "GOARCH=arm64"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install web app dependencies
      run: bun install

    - name: Build web app
      run: bun run build

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev gcc pkg-config

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS has the required frameworks built-in

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      env:
        CGO_ENABLED: 1
        GO111MODULE: on
      run: |
        go mod tidy
        go build -v -ldflags "-H=windowsgui" -o ${{ matrix.artifact_name }} ./main.go

    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      env:
        CGO_ENABLED: 1
        GO111MODULE: on
      run: |
        go mod tidy
        ${{ matrix.build_args }} go build -v -o ${{ matrix.artifact_name }} ./main.go

    - name: Create distribution package
      run: |
        mkdir -p dist-package
        cp ${{ matrix.artifact_name }} dist-package/
        cp -r dist dist-package/
        if [ -f tray_icon.png ]; then
          cp tray_icon.png dist-package/
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist-package/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release packages
      run: |
        for dir in */; do
          artifact_name=$(basename "$dir")
          cd "$dir"
          zip -r "../${artifact_name}.zip" .
          cd ..
        done
      
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}